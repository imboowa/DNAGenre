import interface.GUI_attrfrom user_app.user_home import *from interface.GUI_control import *from interface.GUI_attr import *from customtkinter import *from tkinter import *import datetimeclass User_Credential_Page:    """ User Credentials Page """    def __init__(self):        """ Login Page """        self.window = Tk()        self.window.title("Login Page")        self.window.geometry(f'1080x{self.window.winfo_screenheight()}')        self.window.config(bg=f"{color_scheme}")        self.window.eval("tk::PlaceWindow . center")        self.window.resizable(False, False)        """ Entry For Username """        self.user_name = CTkEntry(self.window, placeholder_text="Username", placeholder_text_color=bright_colors[0], font=(window_font, window_font_size),                             fg_color=color_scheme, text_color=bright_colors[5], corner_radius=corner, border_width=border, width=300, height=50)        self.user_name.place(rely=0.45, relx=0.4)        """ Entry For Password """        self.password_entry = CTkEntry(self.window, placeholder_text="Password", placeholder_text_color=bright_colors[0], font=(window_font, window_font_size),                             fg_color=color_scheme, text_color=bright_colors[5], corner_radius=corner, border_width=border, width=300, height=50,                             show="*")        self.password_entry.place(rely=0.55, relx=0.4)        """ Sign Up """        self.signUp_button = CTkButton(self.window, text="Sign Up", font=(window_font, window_font_size), fg_color=color_scheme, text_color=bright_colors[4],                                  hover_color=bright_colors[2], command=lambda: self.increase_button("Sign Up"))        self.signUp_button.place(relx=0.55, rely=0.63)        """ Login """        login_button = CTkButton(self.window, text="Login", font=(window_font, window_font_size), fg_color=color_scheme,text_color=bright_colors[4], corner_radius=corner,                                 hover_color=bright_colors[2], command=self.authentication)        login_button.place(relx=0.37, rely=0.63)        self.window.mainloop()    def signUp_page(self):        """ Sign Up Page """        self.signUp_window = Tk()        self.signUp_window.title("Sign Up")        self.signUp_window.geometry(f"1080x{self.signUp_window.winfo_screenheight()}")        self.signUp_window.config(bg=f"{color_scheme}")        self.signUp_window.eval("tk::PlaceWindow . center")        self.signUp_window.resizable(False, False)        """ Signing Up New User """        self.new_user_first_name = CTkEntry(self.signUp_window, placeholder_text="First Name", placeholder_text_color=bright_colors[0], font=(window_font, window_font_size),                                 fg_color=color_scheme, text_color=bright_colors[5], corner_radius=corner, border_width=border, width=300,height=50)        self.new_user_first_name.grid(row=0, column=0, padx=30, pady=20)        self.new_user_last_name = CTkEntry(self.signUp_window, placeholder_text="Last Name", placeholder_text_color=bright_colors[0],font=(window_font, window_font_size),                                 fg_color=color_scheme, text_color=bright_colors[5], corner_radius=corner, border_width=border, width=300,height=50)        self.new_user_last_name.grid(row=0, column=1, padx=30, pady=20)        self.new_user_other_name = CTkEntry(self.signUp_window, placeholder_text="Other Name", placeholder_text_color=bright_colors[0],font=(window_font, window_font_size),                                 fg_color=color_scheme, text_color=bright_colors[5], corner_radius=corner, border_width=border, width=300,height=50)        # When Pressed, Shows Input For Third Name        self.if_has_other_names = CTkButton(self.signUp_window, text='...', font=(window_font, (window_font_size - 10)),fg_color=color_scheme, text_color=bright_colors[4],                                            hover_color=bright_colors[2], command=lambda: self.increase_button("Other Names"))        self.if_has_other_names.grid(row=0, column=2)        self.new_username = CTkEntry(self.signUp_window, placeholder_text="Username", placeholder_text_color=bright_colors[0],font=(window_font, window_font_size),                                 fg_color=color_scheme, text_color=bright_colors[5], corner_radius=corner, border_width=border, width=300,height=50)        self.new_username.grid(row=1, column=0, padx=30, pady=20)        self.new_user_password = CTkEntry(self.signUp_window, placeholder_text="Password", placeholder_text_color=bright_colors[0],font=(window_font, window_font_size),                                 fg_color=color_scheme, text_color=bright_colors[5], corner_radius=corner, border_width=border, width=300,height=50, show="*")        self.new_user_password.grid(row=1, column=1, padx=30, pady=20)        # When Pressed, Users Entered Password Can Be Seen        self.show_password = CTkButton(self.signUp_window, text='üëÅ', font=(window_font, (window_font_size - 10)), fg_color=color_scheme, command=lambda: self.increase_button("Show Password"))        self.show_password.grid(row=1, column=2)        signUp_button = CTkButton(self.signUp_window, text='Sign Up', font=(window_font, window_font_size), fg_color=color_scheme, text_color=bright_colors[4],                                  command=self.signingUp)        signUp_button.place(relx=0.25, rely=0.3)        backTo_login_button = CTkButton(self.signUp_window, text='Back To Login', font=(window_font, window_font_size), fg_color=color_scheme,                                  text_color=bright_colors[4], command=lambda: self.increase_button("Back To Login"))        backTo_login_button.place(relx=0.5, rely=0.3)        self.signUp_window.mainloop()    def authentication(self):        """ Reading Database Content """        database_content = open_file(user_database_file)        # Incase Database Is Dead        if database_content is None:            label_1 = CTkLabel(self.window, text="Database Error", font=(window_font, (window_font_size - 10)), fg_color=color_scheme, text_color=bright_colors[1])            label_1.place(relx=0.45, rely=0.69)            try: self.window.after(1000, label_1.destroy)            except tkinter.TclError: return None            return None        """ Get Information From Login """        user_name = self.user_name.get()        user_password = self.password_entry.get()        """ Verification """        for line in database_content:            database_username, database_password, database_firstname, database_lastname, database_othername = line[0].split(',')            # If Match Is Found, Then You Are The One            if str(database_username) == str(user_name) and str(database_password) == str(user_password):                try: self.window.destroy()                except tkinter.TclError: return None                User_Home(database_username, database_firstname, database_lastname)                return None        # Else The Loop Does Not Find You, You Are Not Available For Login        label_2 = CTkLabel(self.window, text="Not Verified", font=(window_font, (window_font_size - 10)), fg_color=color_scheme, text_color=bright_colors[1])        label_2.place(relx=0.45, rely=0.69)        try: self.window.after(1000, label_2.destroy)        except tkinter.TclError: return None        return None    def signingUp(self):        """ Checking For Other Names """        if len(str(self.new_user_other_name.get())) == 0:            place_holder = "0"        else:            # Only If New User Entered A Third Name            place_holder = str(self.new_user_other_name.get())        """ Checking For Errors """        # Length of Input        if (len(str(self.new_user_first_name.get())) == 0 or len(str(self.new_user_last_name.get())) == 0 or                len(str(self.new_username.get())) == 0 or len(str(self.new_user_password.get())) == 0):            label = CTkLabel(self.signUp_window, text="Empty Entry(s)", font=(window_font, window_font_size), text_color=bright_colors[1], fg_color=color_scheme)            label.grid(row=4, column=1, padx=30, pady=20)            try: self.signUp_window.after(1000, label.destroy)            except tkinter.TclError: return            return        # No Commas        if (str(self.new_user_first_name.get()).find(",") != -1) or (str(self.new_user_last_name.get()).find(",") != -1) or \                (str(self.new_username.get()).find(",") != -1) or (str(self.new_user_password.get()).find(",") != -1) or \                (str(self.new_user_other_name.get()).find(",") != -1):            # Tip For App Usage            if interface.GUI_attr.tip_switch == 0:                frame_1 = CTkFrame(self.signUp_window, fg_color=bright_colors[5], width=200, height=10)                frame_1.place(relx=0.455, rely=0.9)                tip_off = CTkLabel(self.signUp_window, text_color=text_color, text="Tip: " + str(tips[1]),                                   fg_color=color_scheme, font=(window_font, (window_font_size - 10)))                tip_off.place(relx=0.4, rely=0.85)                custom_progressbar_tips(self.signUp_window, frame_1, color_scheme, tip_off)                interface.GUI_attr.tip_switch = 1                return            # Remember Commas Are Separators In The Database            label = CTkLabel(self.signUp_window, text="No Comma(s)", font=(window_font, window_font_size),                             text_color=bright_colors[1],                             fg_color=color_scheme)            label.grid(row=4, column=1, padx=30, pady=20)            try: self.signUp_window.after(1000, label.destroy)            except tkinter.TclError: return            return        """ Signing Up User To User Database and Usage Database """        result_userdb_write = write_userdb_file(user_database_file, f"{str(self.new_username.get())},{str(self.new_user_password.get())},"                                          f"{str(self.new_user_first_name.get())},{str(self.new_user_last_name.get())},{place_holder}")        result_usagedb_write = write_usagedb_file(usage_database_file,                           f"{str(self.new_username.get())},0,{datetime.datetime.now().month:02}/{datetime.datetime.now().day:02}/"                           f"{datetime.datetime.now().year}|{datetime.datetime.now().hour:02}:{datetime.datetime.now().minute:02}")        """ Checking for more errors """        # If User Already Exists, If Database Is Live And Alright        if (result_userdb_write == -1) or (result_usagedb_write == -1):            label_1 = CTkLabel(self.signUp_window, text="Username Exists", font=(window_font, window_font_size), text_color=bright_colors[1], fg_color=color_scheme)            label_1.grid(row=4, column=1, padx=30, pady=20)            try: self.signUp_window.after(1000, label_1.destroy)            except tkinter.TclError: return            return        elif (result_userdb_write == -2) or (result_usagedb_write == -2):            label_2 = CTkLabel(self.signUp_window, text="Database Error", font=(window_font, window_font_size), text_color=bright_colors[1], fg_color=color_scheme)            label_2.grid(row=4, column=1, padx=30, pady=20)            try: self.signUp_window.after(1000, label_2.destroy)            except tkinter.TclError: return            return        else:            """ Writing to usagedb file """            # Usage Database And User Database Must Both Agree That New User Was Healthily Received            if (result_usagedb_write == 0) and (result_userdb_write == 0):                self.label_3 = CTkLabel(self.signUp_window, text="Success", font=(window_font, window_font_size), text_color=bright_colors[3],                                        fg_color=color_scheme)                self.label_3.grid(row=4, column=1, pady=20, padx=20)                try: self.signUp_window.after(1000, lambda: self.increase_button("Signed In"))                except tkinter.TclError: return                return            # If No (-2, -1, 0) Maybe None, That Is A Fishy Error Hence No Success            self.label_3 = CTkLabel(self.signUp_window, text="Fishy Error", font=(window_font, window_font_size), text_color=bright_colors[1],                                    fg_color=color_scheme)            self.label_3.grid(row=4, column=1, pady=20, padx=20)            try: self.signUp_window.after(1000, self.label_3.destroy)            except tkinter.TclError: return            return    def increase_button(self, button):        """ Managing The Button System """        button_system[button] += 1        """ Sign Up Page """        if button == "Sign Up" and button_system["Sign Up"] > 0:            try: self.window.destroy()            except tkinter.TclError: return            self.signUp_page()            return        # Called If User Had Third Name        elif button == "Other Names" and button_system["Other Names"] > 0:            try: self.if_has_other_names.destroy()            except tkinter.TclError: return            self.new_user_other_name.grid(row=0, column=2, padx=30, pady=20)            return        # Called If User Wants To See Their Password        elif button == "Show Password" and button_system["Show Password"] > 0:            if button_system["Show Password"] % 2 == 1:                try: self.new_user_password.configure(show="")                except tkinter.TclError: return                return            else:                try: self.new_user_password.configure(show="*")                except tkinter.TclError: return                return        # Called If User Wants To Go Back To Log in        elif button == "Back To Login" and button_system["Back To Login"] > 0:            try: self.signUp_window.destroy()            except tkinter.TclError: return            User_Credential_Page()            return        # Called If User Was Successfully Signed In        elif button == "Signed In" and button_system["Signed In"] > 0:            try:                self.label_3.destroy()                self.signUp_window.destroy()            except tkinter.TclError:                return            User_Credential_Page()            return