from DNAtoolkit.DataTools import *from matplotlib.figure import Figurefrom matplotlib.backends.backend_tkagg import FigureCanvasTkAggfrom user_app.ProteinSite import *import interface.GUI_attr# Is Doneclass DNA_analysis:    """ DNA Analysis """    def __init__(self, filename, DNA_label, seq_type, window, username, firstname, lastname, prev_window):        self.prev_window = prev_window        # Cleaned Data        self.DNA_data = clean_data(filename, DNA_label)        # Checking Possible Errors In The File        if self.DNA_data is None:            label = CTkLabel(window, text="File Error", font=(window_font, (window_font_size - 10)), fg_color=color_scheme,                             text_color=bright_colors[1])            label.place(rely=0.87, relx=0.4)            window.after(1000, label.destroy)            return        if (len(DNA_label) == 0) or ('' in self.DNA_data.keys()):            label = CTkLabel(window, text="Enter Read Identifier", font=(window_font, (window_font_size - 10)), fg_color=color_scheme, text_color=bright_colors[1])            label.place(rely=0.87, relx=0.4)            window.after(1000, label.destroy)            return        elif (len(seq_type) == 0) or (seq_type not in NUCLEOTIDE_BASE.keys()):            label = CTkLabel(window, text="Enter DNA or RNA", font=(window_font, (window_font_size - 10)), fg_color=color_scheme, text_color=bright_colors[1])            label.place(rely=0.87, relx=0.4)            window.after(1000, label.destroy)            return        else:            for i in self.DNA_data.values():                result = validate_seq(str(i), seq_type)                if not result:                    label = CTkLabel(window, text=f"Not {seq_type}", font=(window_font, (window_font_size - 10)),                                     fg_color=color_scheme, text_color=bright_colors[1])                    label.place(rely=0.87, relx=0.4)                    window.after(1000, label.destroy)                    return            window.destroy()        self.filename = filename        """ DNA Stuff Window """        self.window = Tk()        self.window.title(f"{str(filename)[str(filename).rindex('/')+1:]}")        self.window.geometry(f"1080x{self.window.winfo_screenheight()}")        self.window.config(bg=f"{color_scheme}")        self.window.eval('tk::PlaceWindow . center')        self.window.propagate(True)        self.window.resizable(False, False)        """ Sequence Length """        sequences_length_label = CTkLabel(self.window, text='Sequence Length', font=(window_font, window_font_size),                                          fg_color=color_scheme, text_color=bright_colors[5])        sequences_length_label.grid(row=0, column=0, sticky='w', padx=10, pady=10)        sequences_length = CTkLabel(self.window, text='', font=(window_font, window_font_size),                                          fg_color=color_scheme, text_color=text_color)        sequences_length.grid(row=0, column=1, sticky='w', pady=10, padx=10)        total_DNA_length = 0        for i in self.DNA_data.values():            total_DNA_length += len(str(i))        sequences_length.configure(text=str(total_DNA_length))        """ Nucleotide Frequency """        nuc_count_label = CTkLabel(self.window, text='Nucleotide Count', font=(window_font, window_font_size),                                          fg_color=color_scheme, text_color=bright_colors[5])        nuc_count_label.grid(row=1, column=0, sticky='w', padx=10, pady=10)        nuc_count = CTkLabel(self.window, text='', font=(window_font, window_font_size),                                    fg_color=color_scheme, text_color=text_color)        nuc_count.grid(row=1, column=1, sticky='w', padx=10, pady=10)        DNA_count_dict = countNucFrequency(str(self.DNA_data.values()), seq_type)        if DNA_count_dict != -1 and DNA_count_dict != -2:            animate_words(self.window, ''.join({f"{key}:{value} " for key, value in DNA_count_dict.items()}), nuc_count)        """ GC Percent """        gc_percent_label = CTkLabel(self.window, text='GC Percent', font=(window_font, window_font_size),                                   fg_color=color_scheme, text_color=bright_colors[5])        gc_percent_label.grid(row=2, column=0, sticky='w', padx=10, pady=10)        gc_percent = CTkLabel(self.window, text='', font=(window_font, window_font_size),                             fg_color=color_scheme, text_color=text_color)        gc_percent.grid(row=2, column=1, sticky='w', padx=10, pady=10)        count_1, total_gc_1 = 0, 0.0        for i in self.DNA_data.values():            result_gc_1 = gc_content(str(i))            # Any Empty Read Index Has No GC Content And Has No Effect On Overall GC Content            if result_gc_1 != -1:                total_gc_1 += result_gc_1                count_1 += 1        # GC Percent Would Be More Than 100%, So We Find the Mean To Get The Accurate GC Percent Overall        total_gc_1 = round(total_gc_1 / count_1, 3)        animate_words(self.window, f"{total_gc_1}%", gc_percent)        """ AT/AU Percent """        at_percent_label = CTkLabel(self.window, text='AT/AU Percent', font=(window_font, window_font_size),                                    fg_color=color_scheme, text_color=bright_colors[5])        at_percent_label.grid(row=3, column=0, sticky='w', padx=10, pady=10)        at_percent = CTkLabel(self.window, text='', font=(window_font, window_font_size),                              fg_color=color_scheme, text_color=text_color)        at_percent.grid(row=3, column=1, sticky='w', padx=10, pady=10)        count_2, total_at_1 = 0, 0.0        for i in self.DNA_data.values():            result_at_1 = at_content(i, seq_type)            # Any Empty Read Index Has No AT/AU Content And Has No Effect On Overall AT/AU Content            if result_at_1 != -1 and result_at_1 != -2:                total_at_1 += result_at_1                count_2 += 1        # AT/AU Percent Would Be More Than 100%, So We Find the Mean To Get The Accurate AT/AU Percent Overall        total_at_1 = round(total_at_1 / count_2, 3)        animate_words(self.window, f"{total_at_1}%", at_percent)        """ Plotting GC Per Subseq """        """ Frame For The Data """        frame_1 = CTkFrame(self.window, fg_color=color_scheme)        frame_1.grid(row=4, column=0, sticky='w', padx=10, pady=10)        """ Figure For The Data """        fig_1 = Figure(figsize=(5, 4), dpi=100)        plot_1 = fig_1.add_subplot(111)        plot_1.set_xlabel('Read Index')        plot_1.set_ylabel('GC Percent')        plot_1.set_title('GC Content Per Sub Section')        count_list_1, gc_content_list_1 = list(), list()        count_3 = 1        for i in self.DNA_data.values():            result_gc_2 = gc_content(i)            if result_gc_2 != -1:                count_list_1.append(count_3)                gc_content_list_1.append(result_gc_2)                count_3 += 1            else:                # We Need The User To See The Read Index Without GC Content By Setting That Read Index To Zero                # Note: Even Normal Read Indexes With Nucleotides Can Lack GC Hence Seeing Zero For Them Too                count_list_1.append(count_3)                gc_content_list_1.append(0.000000)                count_3 += 1        plot_1.plot(count_list_1, gc_content_list_1, c=bright_colors[1], marker='o')        """ Drawing Figure Onto Window With canvas_1 """        canvas_1 = FigureCanvasTkAgg(fig_1, master=frame_1)        canvas_1.draw()        canvas_1.get_tk_widget().pack(fill='both', expand=True)        """ Plotting AT Per Subseq """        """ Frame For The Data """        frame_2 = CTkFrame(self.window, fg_color=color_scheme)        frame_2.grid(row=4, column=1, sticky='w', padx=10, pady=10)        """ Figure For The Data """        fig_2 = Figure(figsize=(5, 4), dpi=100)        plot_2 = fig_2.add_subplot(111)        plot_2.set_xlabel('Read Index')        plot_2.set_ylabel('AT/AU Percent')        plot_2.set_title('AT/AU Content Per Sub Section')        count_list_2, at_content_list_1 = list(), list()        count_4 = 1        for i in self.DNA_data.values():            result_at_2 = at_content(i, seq_type)            if result_at_2 != -1 and result_at_2 != -2:                count_list_2.append(count_4)                at_content_list_1.append(result_at_2)                count_4 += 1            else:                # We Need The User To See The Read Index Without AT/AU Content By Setting That Read Index To Zero                # Note: Even Normal Read Indexes With Nucleotides Can Lack AT/AU Hence Seeing Zero For Them Too                count_list_2.append(count_4)                at_content_list_1.append(0.000000)                count_4 += 1        plot_2.plot(count_list_2, at_content_list_1, c=bright_colors[4], marker='o')        """ Drawing Figure Onto Window With canvas_1 """        canvas_2 = FigureCanvasTkAgg(fig_2, master=frame_2)        canvas_2.draw()        canvas_2.get_tk_widget().pack(fill='both', expand=True)        """ Buttons For Back And Next """        next_button = CTkButton(self.window, text='Next', fg_color=color_scheme, text_color=bright_colors[4], font=(window_font, window_font_size),                                corner_radius=corner, hover_color=bright_colors[2], command=lambda: Other_Analysis(username, firstname,lastname,                                                                     self.window, self.DNA_data, self.prev_window, seq_type, prev_window))        next_button.grid(row=5, column=1, sticky='e', padx=10, pady=20)        back_button = CTkButton(self.window, text='Back', fg_color=color_scheme, text_color=bright_colors[4],                                font=(window_font, window_font_size), corner_radius=corner, hover_color=bright_colors[2],                                command=lambda: self.back_func(username, firstname, lastname, prev_window))        back_button.grid(row=5, column=0, sticky='w', padx=10, pady=20)        self.window.mainloop()    def back_func(self, username, firstname, lastname, prev_window):        # A Tip On App Usage        if interface.GUI_attr.tip_switch == 0:            frame_1 = CTkFrame(self.window, fg_color=bright_colors[5], width=100, height=10)            frame_1.place(relx=0.42, rely=0.9)            tip_off = CTkLabel(self.window, text_color=text_color, text="Tip: " + str(tips[2]),                               fg_color=color_scheme, font=(window_font, (window_font_size - 10)))            tip_off.place(relx=0.315, rely=0.85)            custom_progressbar_tips(self.window, frame_1, color_scheme, tip_off)            interface.GUI_attr.tip_switch = 1            return None        self.window.destroy()        prev_window(username, firstname, lastname)        return Noneclass Other_Analysis:    """ Continuing DNA Analysis """    def __init__(self, username, firstname, lastname, prev_window, DNA_data, back_to_window, seq_type, menu_window):        prev_window.destroy()        self.seq_type = seq_type        self.back_to_window = back_to_window        # This Variable Helps To Know How Many Graphs Are In The Codon Frame        self.codon_limit = 0        """ Continuing Window For DNA Analysis """        self.window = Tk()        self.window.config(bg=color_scheme)        self.window.title("Continuing Analysis")        self.window.geometry(f"1080x{self.window.winfo_screenheight()}")        self.window.eval('tk::PlaceWindow . center')        self.window.propagate(True)        self.window.resizable(False, False)        """ Making The Codon Heading """        self.codon_activity_label = CTkLabel(self.window, text="Codon Activity", font=(window_font, window_font_size),                                        fg_color=color_scheme, text_color=text_color)        self.codon_activity_label.pack()        """ Frame To Have self.frame_1 And get_read_index_entry """        self.mother_frame = CTkFrame(self.window, fg_color=color_scheme)        self.mother_frame.pack()        """ Making Entry For Indexes And Radiobuttons For Initial Starting Position """        get_read_index_entry = CTkEntry(self.mother_frame, placeholder_text_color=bright_colors[0], placeholder_text='Enter Read Index',                                        text_color=bright_colors[5], fg_color=color_scheme, border_color=bright_colors[2],                                        border_width=border, width=500, height=100, font=(window_font, (window_font_size + 20)))        get_read_index_entry.grid(row=0, column=0, sticky='w', padx=10, pady=10)        """ Subframe For Codon Activity, Buttons And Entry """        self.frame_1 = CTkFrame(self.mother_frame, fg_color=color_scheme)        self.frame_1.grid(row=0, column=1, sticky='e', padx=10)        """ Making The Codon Activity Display """        self.frame_2 = CTkScrollableFrame(self.window, fg_color=bright_colors[3], scrollbar_fg_color=bright_colors[3],                                          scrollbar_button_color=bright_colors[3],                                          scrollbar_button_hover_color=bright_colors[3], height=0,                                          width=self.window.winfo_width())        self.frame_2.pack()        selected_radio_1 = IntVar(value=-1)        """ Counter Managing self.frame_2 Height """        self.count_1 = 0        """ Showing Normal Complementary Strand Radiobuttons """        for i in range(3):            radio_1 = CTkRadioButton(self.frame_1, text=str(i + 1)+"+", font=(window_font, window_font_size), fg_color=color_scheme,                                   text_color=bright_colors[0], value=i, variable=selected_radio_1,                                   border_color=bright_colors[2], border_width_checked=(border + 5),                                   border_width_unchecked=border, corner_radius=(corner - 2),                                   command=lambda: self.show_codon_activity_normal(selected_radio_1.get(), get_read_index_entry.get(), DNA_data))            radio_1.grid(row=0, column=i+1, sticky='e', padx=10, pady=1)        """ Showing Reverse Complementary Strand Radiobuttons """        selected_radio_2 = IntVar(value=-1)        for i in range(3):            radio_2 = CTkRadioButton(self.frame_1, text=str(i + 1)+"-", font=(window_font, window_font_size), fg_color=color_scheme,                                   text_color=bright_colors[0], value=i, variable=selected_radio_2,                                   border_color=bright_colors[2], border_width_checked=(border + 5),                                   border_width_unchecked=border, corner_radius=(corner - 2),                                   command=lambda: self.show_codon_activity_reversed(selected_radio_2.get(), get_read_index_entry.get(), DNA_data))            radio_2.grid(row=1, column=i+1, sticky='e', padx=10, pady=1)        """ Making The Clear And Back Button Frame """        self.frame_3 = CTkFrame(self.window, fg_color=color_scheme, height=100)        self.frame_3.pack(fill='both', pady=20, padx=10)        """ Making The Clear And Back Button """        self.clear_tables = CTkButton(self.frame_3, text="Clear", font=(window_font, window_font_size), fg_color=color_scheme, hover_color=bright_colors[2],                                 text_color=bright_colors[4], corner_radius=corner, command=self.clear_screen)        self.clear_tables.grid(row=0, column=0, sticky='w', padx=105, pady=5)        self.back_button = CTkButton(self.frame_3, text="Menu", font=(window_font, window_font_size), fg_color=color_scheme, hover_color=bright_colors[2],                                 text_color=bright_colors[4], corner_radius=corner, command=lambda: self.back_to_menu(username, firstname, lastname))        self.back_button.grid(row=0, column=1, sticky='news', padx=105, pady=5)        self.protein_analysis = CTkButton(self.frame_3, text="Proteins", font=(window_font, window_font_size), fg_color=color_scheme,                                          text_color=bright_colors[4], corner_radius=corner, hover_color=bright_colors[2],                                          command=lambda: Protein(username, firstname, lastname, self.window, DNA_data, seq_type, menu_window))        self.protein_analysis.grid(row=0, column=2, sticky='e', padx=105, pady=5)        self.window.mainloop()    def clear_screen(self):        """ Clears The Frame """        if self.frame_2.winfo_children():            for widget in self.frame_2.winfo_children():                widget.destroy()            self.frame_2.configure(height=0)            return        # A Tip On App Usage        if interface.GUI_attr.tip_switch == 1:            frame_1 = CTkFrame(self.window, fg_color=bright_colors[5], width=100, height=10)            frame_1.place(relx=0.44, rely=0.9)            tip_off = CTkLabel(self.window, text_color=text_color, text="Tip: " + str(tips[0]),                               fg_color=color_scheme, font=(window_font, (window_font_size - 10)))            tip_off.place(relx=0.315, rely=0.85)            custom_progressbar_tips(self.window, frame_1, color_scheme, tip_off)            interface.GUI_attr.tip_switch = 2            return    def back_to_menu(self, username, firstname, lastname):        """ Goes Back To Menu """        self.window.destroy()        self.back_to_window(username, firstname, lastname)        return None    def show_codon_activity_normal(self, radio_value, entry_value, DNA_data):        """ Showing Codon Activity Further """        # Checking For Errors First        if radio_value == -1:            error_label = CTkLabel(self.window, text="Select Initial Position", font=(window_font, window_font_size),                                   fg_color=color_scheme, text_color=bright_colors[1])            error_label.place(relx=0.4, rely=0.9)            self.window.after(1000, error_label.destroy)            return None        elif not(entry_value.isdigit()) or (len(entry_value) == 0) or (int(entry_value) > len(DNA_data.keys())) or (int(entry_value) < 1):            error_label = CTkLabel(self.window, text="Entry Invalid", font=(window_font, window_font_size),                                   fg_color=color_scheme, text_color=bright_colors[1])            error_label.place(relx=0.4, rely=0.9)            self.window.after(1000, error_label.destroy)            return None        # Checking If User Has Not Exceeded The Limit        if self.codon_limit == view_limit:            for widget in self.frame_2.winfo_children():                widget.destroy()            self.frame_2.configure(height=0)            self.codon_limit = 0            return None        # Increment On Every Codon Show        self.count_1 += 1        entry_value = int(entry_value)        """ Figure For Codon Activity """        fig_1 = Figure(figsize=(5,4), dpi=100)        plot_1 = fig_1.add_subplot(111)        plot_1.set_title(f"Codon Activity In Read Index {entry_value}; Start Position {radio_value+1}+")        plot_1.set_xlabel("Codons in Read Index")        plot_1.set_ylabel("Appearance(s) in Read Index")        codon_usage_data_1 = dict()        for index, index_DNA in enumerate(DNA_data.values()):            if (index + 1) == entry_value:                temp_codon_usage_1 = codon_usage(index_DNA, self.seq_type, radio_value)                if temp_codon_usage_1 != -1 and temp_codon_usage_1 != -2 and temp_codon_usage_1 != -3 and temp_codon_usage_1 is not None:                    codon_usage_data_1 = temp_codon_usage_1        plot_1.bar(codon_usage_data_1.keys(), codon_usage_data_1.values())        canvas_1 = FigureCanvasTkAgg(fig_1, master=self.frame_2)        canvas_1.draw()        canvas_1.get_tk_widget().pack(fill='both', expand=True)        self.codon_limit += 1        width_1, height_1 = canvas_1.get_width_height()        if (self.count_1 * height_1) > self.window.winfo_height() - (self.back_button.winfo_height() + self.codon_activity_label.winfo_height() + self.frame_1.winfo_height()):            self.frame_2.configure(height=500)        elif (self.count_1 * height_1) < self.window.winfo_height():            self.frame_2.configure(height=height_1*self.count_1)        return None    def show_codon_activity_reversed(self, radio_value, entry_value, DNA_data):        """ Showing Codon Activity Further """        # Checking For Errors First        if radio_value == -1:            error_label = CTkLabel(self.window, text="Select Initial Position", font=(window_font, window_font_size),                                   fg_color=color_scheme, text_color=bright_colors[1])            error_label.place(relx=0.4, rely=0.9)            self.window.after(1000, error_label.destroy)            return None        elif not(entry_value.isdigit()) or (len(entry_value) == 0) or (int(entry_value) > len(DNA_data.keys())) or (int(entry_value) < 1):            error_label = CTkLabel(self.window, text="Entry Invalid", font=(window_font, window_font_size),                                   fg_color=color_scheme, text_color=bright_colors[1])            error_label.place(relx=0.4, rely=0.9)            self.window.after(1000, error_label.destroy)            return None        # Checking If User Has Not Exceeded The Limit        if self.codon_limit == view_limit:            for widget in self.frame_2.winfo_children():                widget.destroy()            self.frame_2.configure(height=0)            self.codon_limit = 0            return None        # Increment On Every Codon Show        self.count_1 += 1        entry_value = int(entry_value)        """ Figure For Reversed Strand's Codon Activity """        fig_2 = Figure(figsize=(5,4), dpi=100)        plot_2 = fig_2.add_subplot(111)        plot_2.set_title(f"Codon Activity In Read Index {entry_value}; Start Position {radio_value+1}-")        plot_2.set_xlabel("Codons in Read Index")        plot_2.set_ylabel("Appearance(s) in Read Index")        codon_usage_data_2 = dict()        for index, index_DNA in enumerate(DNA_data.values()):            if (index + 1) == entry_value:                temp_reversed_complement = reverseComplement(index_DNA, self.seq_type)                if temp_reversed_complement != -1:                    temp_codon_usage_2 = codon_usage(temp_reversed_complement, self.seq_type, radio_value)                    if temp_codon_usage_2 != -1 and temp_codon_usage_2 != -2 and temp_codon_usage_2 != -3 and temp_codon_usage_2 is not None:                        codon_usage_data_2 = temp_codon_usage_2        plot_2.bar(codon_usage_data_2.keys(), codon_usage_data_2.values())        canvas_2 = FigureCanvasTkAgg(fig_2, master=self.frame_2)        canvas_2.draw()        canvas_2.get_tk_widget().pack(fill='both', expand=True)        self.codon_limit += 1        width_2, height_2 = canvas_2.get_width_height()        if (self.count_1 * height_2) > self.window.winfo_height() - (self.back_button.winfo_height() + self.codon_activity_label.winfo_height() + self.frame_1.winfo_height()):            self.frame_2.configure(height=500)        elif (self.count_1 * height_2) < self.window.winfo_height():            self.frame_2.configure(height=height_2*self.count_1)        return None